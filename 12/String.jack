// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/12/String.jack

/**
 * The String type.
 */
class String {

	static int CHAR_MINUS, CHAR_ZERO, CHAR_NINE;

	field int capacity, size;
	field Array data;

    /** Constructs a new empty String with a maximum length of
     *  maxLength. */
    constructor String new(int maxLength) {
		let CHAR_MINUS = 45;
		let CHAR_ZERO = 48;
		let CHAR_NINE = 57;
		let capacity = maxLength;
		let size = 0;
		if (capacity > 0) {
			let data = Array.new(capacity);
		}
		return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
		if (capacity > 0) {
			do data.dispose();
		}
		return;
    }

    /** Returns the current length of this String. */
    method int length() {
		return size;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
		return data[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
		let data[j] = c;
		if (size < (j + 1)) {
			let size = j + 1;
		}
		return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
		let data[size] = c;
		let size = size + 1;
		return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		let size = size - 1;
		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
		var int int_value, index, c;
		var boolean negative;
		let int_value = 0;
		let index = 0;
		let negative = false;
		if (index < length()) {
			if (data[index] = CHAR_MINUS) {
				let negative = true;
				let index = index + 1;
			}
		}
		while (index < length()) {
			let c = data[index];
			if ((CHAR_ZERO < (c + 1)) & ((c - 1) < CHAR_NINE)) {
				let int_value = int_value * 10;
				let int_value = int_value + (data[index] - CHAR_ZERO);
				let index = index + 1;
			} else {
				let index = length();
			}
		}
		if (negative) {
			let int_value = -int_value;
		}
		return int_value;
    }

    /** Sets this String to hold a representation of the given
     *  number. */
    method void setInt(int number) {
		var int temp1, num_round, index, c;
		let size = 0;
		if (number < 0) {
			do appendChar(CHAR_MINUS);
			let number = -number;
		}
		let temp1 = number;
		let index = length() - 1;
		while (temp1 > 0) {
			let index = index + 1;
			let temp1 = temp1 / 10;
		}
		while (number > 0) {
			let num_round = (number / 10) * 10;
			let c = CHAR_ZERO + (number - num_round);
			do setCharAt(index, c);
			let number = number / 10;
			let index = index - 1;
		}
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
