// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
	
	static Array _twoPowers;
	static int _bitsNum;

    /** Initializes the library. */
    function void init() {
		var int curValue;
		var int i;
		
		let _bitsNum = 16;
		let _twoPowers = Array.new(_bitsNum);
		let curValue = 1;
		let i = 0;
		while (i < _bitsNum) {
			let _twoPowers[i] = curValue;
			let curValue = curValue + curValue;
			let i = i + 1;
		}
		return;
	}
	
    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x < 0) {
			return -x;
		}
		return x;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
		var int sum, shiftedX, i;
		
		let sum = 0;
		let shiftedX = x;
		let i = 0;
		
		while (i < _bitsNum) {
			if (Math.bit(y,i)) {
				let sum = sum + shiftedX;
			}
			let shiftedX =  shiftedX + shiftedX;
			let i = i + 1;
		}
		return sum;		
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
		var int _x, _y, q, result;
        var boolean negX, negY;
        
		let negX = x < 0;
        let negY = y < 0;
        let _x = Math.abs(x);
        let _y = Math.abs(y);

        if( _y > _x ) {
            return 0;
        }
		
        let q = Math.divide(_x, _y + _y);
		
        if (_x - (2 * q * _y) < _y ) {
            let result = q + q;
        }
		else {
			let result = q + q + 1;
		}
        if (negX = negY) {
            return result;
        }
        else {
            return -result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y, j, lowApprox, poweredLowApprox;
        
        let y = 0;
        let j = Math.divide(_bitsNum, 2) - 1;
        while(~(j < 0)) {
            let lowApprox = y + _twoPowers[j];
            let poweredLowApprox = lowApprox * lowApprox;
            if( ~(poweredLowApprox > x) & (poweredLowApprox > 0) ) {
                let y = lowApprox;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a > b) {
			return a;
		}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a < b) {
			return a;
		}
		return b;
    }
	
	/** Returns the bit in the Jth place of x. */
	function int bit(int x, int j) {
		return x & _twoPowers[j];
    }
}
